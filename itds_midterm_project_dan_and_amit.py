# -*- coding: utf-8 -*-
"""ITDS Midterm Project- Dan and Amit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZhZDOYTekHl10dhn7X6BosDs7V8xFQd

# Midterm Project â€“ Data Analysis on Unicorn Startups

## Team Members:
 - Dan Madpis
 - Amit Mesil

## Chosen Dataset:
[Unicorn Startups Dataset on Kaggle](https://www.kaggle.com/datasets/ramjasmaurya/unicorn-startups/data)

## Why this dataset?
We chose this dataset because it contains detailed information about unicorn startups â€” private companies valued at over $1 billion. This allows for interesting analysis of company valuations across time, countries, and industries, as well as trends in startup funding and growth. The dataset includes numerical, categorical, and date-type data, which makes it suitable for a variety of visualizations and statistical exploration.
"""

import seaborn as sns    # a powerful visualization library operating on DataFrames
import matplotlib.pyplot as plt
from datetime import datetime
import statsmodels.formula.api as smf # smf will be used for running the regression
!pip install --upgrade seaborn

import pandas as pd      # importing the pandas library (for the DataFrames)

path = "https://drive.google.com/file/d/14zL5dj_UMA71tWW7VWMHxtZYk3CL_iSG/view?usp=sharing"
# make a manipulation to the link
path ='https://drive.google.com/uc?id=' + path.split('/')[-2]
# load the csv file
df = pd.read_csv(path)

df.head()

df.info()

# Quick statistical summary
df.describe(include='all')

# Check dataset shape (rows & columns)
print(f"Rows: {df.shape[0]}, Columns: {df.shape[1]}")
#Column types and meanings
df.dtypes
#Check for missing values
df.isnull().sum()

df.columns = df.columns.str.strip()
print(df.columns)
df['Valuation ($B)'] = df['Valuation ($B)'].astype(str)
df['Valuation ($B)'] = df['Valuation ($B)'].str.replace('[^0-9.]', '', regex=True)
df['Valuation ($B)'] = pd.to_numeric(df['Valuation ($B)'], errors='coerce')
df['Valuation ($B)'].describe()

# Clean Valuation ($B): remove '$' and convert to float
df['Valuation ($B)'] = df['Valuation ($B)'].replace('[\$,]', '', regex=True).astype(float)

# Convert Date Joined to datetime
df['Date Joined'] = pd.to_datetime(df['Date Joined'])

# Fill missing Investors with 'Unknown'
df['Investors'] = df['Investors'].fillna('Unknown')

# Check final info
df.info()

"""##Graph 1 - Distribution of Unicorn Company Valuations"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Filter top 10 most frequent industries
top_industries = df['Industry'].value_counts().head(10).index
filtered_df = df[df['Industry'].isin(top_industries)]

# Step 2: Sort industries by median valuation
median_order = (
    filtered_df.groupby('Industry')['Valuation ($B)']
    .median()
    .sort_values(ascending=False)
    .index
)

# Step 3: Create colorful boxplot WITHOUT log scale, with hue fix
plt.figure(figsize=(14, 7))
sns.boxplot(
    x='Industry',
    y='Valuation ($B)',
    data=filtered_df,
    order=median_order,
    hue='Industry',        # Added hue to match palette
    palette='Set2',
    showfliers=False,
    width=0.6,
    legend=False           # Remove legend for cleaner plot
)

# Step 4: Add title and labels
plt.title('How Much Are Unicorn Startups Worth?\n(Top 10 Industries)', fontsize=18, fontweight='bold')
plt.xlabel('Industry', fontsize=14)
plt.ylabel('Valuation in Billions of Dollars ($B)', fontsize=14)

# Step 5: Rotate x-axis labels
plt.xticks(rotation=30, ha='right', fontsize=12)
plt.yticks(fontsize=12)

# Step 6: Add grid lines
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Step 7: Annotate median values
medians = filtered_df.groupby('Industry')['Valuation ($B)'].median().reindex(median_order)
for i, median_val in enumerate(medians):
    plt.text(i, median_val + 1, f'{median_val:.1f}B', ha='center', fontsize=10, color='black', fontweight='bold')

# Final layout
plt.tight_layout()
plt.show()

"""## Insight 1: Distribution of Unicorn Company Valuations

- The histogram shows that most unicorn companies are valued between $1B and $10B, with the number of companies decreasing as the valuation increases. This right-skewed distribution is typical in startup ecosystems, where a few companies reach extremely high valuations, but the majority remain closer to the $1B threshold.

- The presence of a few extreme outliers (e.g., over $100B) highlights the exceptional nature of some firms, but they remain rare.

##Graph 2 - Top 10 Countries by Number of Unicorns
"""

# Top 10 Countries by Number of Unicorn Startups

import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Get top 10 countries by unicorn count
top_countries = df['Country'].value_counts().head(10)

# Step 2: Plot
plt.figure(figsize=(10,6))
sns.barplot(
    x=top_countries.values,
    y=top_countries.index,
    palette='viridis'
)

# Step 3: Format the chart
plt.title('Top 10 Countries by Number of Unicorn Startups', fontsize=14)
plt.xlabel('Number of Unicorn Companies')
plt.ylabel('Country')
plt.tight_layout()
plt.show()

"""##Insight #2: Top 10 Countries by Number of Unicorns
- The bar chart shows that the United States leads by far in the number of unicorn startups, followed by countries like China, India, and the United Kingdom. This indicates a strong startup ecosystem in those regions, especially in the tech sector.

## Graph 3 - Valuation Distribution by Industry (Top 10 only)
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Filter top 10 most frequent industries
top_industries = df['Industry'].value_counts().head(10).index
filtered_df = df[df['Industry'].isin(top_industries)]

# Step 2: Create a clean boxplot with log scale and no outliers
plt.figure(figsize=(12,6))
sns.boxplot(
    x='Industry',
    y='Valuation ($B)',
    data=filtered_df,
    showfliers=False  # Hide outliers for clearer visualization
)

# Step 3: Format the chart
plt.yscale('log')  # Log scale for better visualization of wide range
plt.title('Valuation Distribution by Top 10 Industries (Log Scale, Outliers Hidden)', fontsize=14)
plt.xlabel('Industry')
plt.ylabel('Valuation ($B) â€“ Log Scale')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""##Insight #3: Valuation Distribution by Industry
- The boxplot reveals that industries such as Fintech and AI have the widest valuation ranges, with some extreme outliers. In contrast, industries like Education and Health show more consistent and narrower valuation distributions. This may reflect higher investor interest and risk in emerging tech sectors.

##Graph 4 - Unicorns Founded per Year
"""

#Number of Unicorns Founded Per Year
df['Date Joined'].head()
# Convert 'Date Joined' to datetime format
df['Date Joined'] = pd.to_datetime(df['Date Joined'], errors='coerce')
# Extract year only
df['Year Joined'] = df['Date Joined'].dt.year
import matplotlib.pyplot as plt
import seaborn as sns

# Count number of unicorns per year
unicorns_per_year = df['Year Joined'].value_counts().sort_index()

# Plot
plt.figure(figsize=(10,6))
sns.lineplot(x=unicorns_per_year.index, y=unicorns_per_year.values, marker='o')

plt.title('Number of Unicorns Founded per Year', fontsize=14)
plt.xlabel('Year')
plt.ylabel('Number of Companies')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""
##Insight #4: Unicorns Founded per Year
- The number of unicorn startups has grown rapidly in the past decade, with a major spike around 2021. This could be attributed to tech acceleration and increased venture capital funding during the COVID-19 period. A decline is visible in 2023â€“2024, likely due to global economic shifts.

"""

pip install streamlit

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load data
df = pd.read_csv('unicorns.csv')

# Clean column names
df.columns = df.columns.str.strip()

# Clean 'Valuation ($B)' column
df['Valuation ($B)'] = df['Valuation ($B)'].astype(str).str.replace('[^0-9.]', '', regex=True)
df['Valuation ($B)'] = pd.to_numeric(df['Valuation ($B)'], errors='coerce')

# Convert 'Date Joined' to datetime and extract year
df['Date Joined'] = pd.to_datetime(df['Date Joined'], errors='coerce')
df['Year Joined'] = df['Date Joined'].dt.year

# Streamlit layout
st.title("ðŸ¦„ Unicorn Startups Analysis")
st.markdown("This app presents insights from the global unicorn startups dataset.")

# 1. Valuation Distribution (Histogram)
st.subheader("1. Distribution of Unicorn Valuations")
filtered_val = df[df['Valuation ($B)'] < 200]
fig1, ax1 = plt.subplots()
sns.histplot(data=filtered_val, x='Valuation ($B)', bins=30, kde=True, color='skyblue', ax=ax1)
ax1.set_title("Distribution of Unicorn Valuations")
ax1.set_xlabel("Valuation ($B)")
ax1.set_ylabel("Number of Companies")
st.pyplot(fig1)

# 2. Top 10 Countries by Unicorn Count
st.subheader("2. Top 10 Countries by Number of Unicorns")
top_countries = df['Country'].value_counts().head(10)
fig2, ax2 = plt.subplots()
sns.barplot(x=top_countries.values, y=top_countries.index, palette='viridis', ax=ax2)
ax2.set_title("Top 10 Countries by Unicorn Count")
ax2.set_xlabel("Number of Unicorns")
ax2.set_ylabel("Country")
st.pyplot(fig2)

# 3. Valuation by Industry (Boxplot)
st.subheader("3. Valuation Distribution by Top 10 Industries")
top_industries = df['Industry'].value_counts().head(10).index
filtered_df = df[df['Industry'].isin(top_industries)].copy()
median_order = filtered_df.groupby('Industry')['Valuation ($B)'].median().sort_values(ascending=False).index
fig3, ax3 = plt.subplots(figsize=(12, 6))
sns.boxplot(
    x='Industry',
    y='Valuation ($B)',
    data=filtered_df,
    order=median_order,
    showfliers=False,
    palette='Set2',
    ax=ax3
)
ax3.set_title("Valuation by Industry")
ax3.set_xlabel("Industry")
ax3.set_ylabel("Valuation ($B)")
plt.xticks(rotation=30, ha='right')
st.pyplot(fig3)

# 4. Unicorns Founded per Year
st.subheader("4. Unicorns Founded per Year")
unicorns_per_year = df['Year Joined'].value_counts().sort_index()
fig4, ax4 = plt.subplots()
sns.lineplot(x=unicorns_per_year.index, y=unicorns_per_year.values, marker='o', ax=ax4)
ax4.set_title("Unicorns Founded Each Year")
ax4.set_xlabel("Year")
ax4.set_ylabel("Number of Companies")
ax4.grid(True, linestyle='--', alpha=0.5)
st.pyplot(fig4)

# Footer
st.markdown("---")
st.markdown("Made by **Dan & Amit** Â· ITDS Midterm Project")

